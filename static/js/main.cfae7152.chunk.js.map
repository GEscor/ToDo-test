{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["currentTasks","localStorage","getItem","JSON","parse","finishedTasks","NewTask","props","taskName","description","priority","endTime","endDate","react_default","a","createElement","className","id","onChange","e","onNameChange","type","placeholder","autoComplete","value","onDescriptionChange","onTimeChange","onDateChange","min","max","onPriorityClick","name","checked","onClick","onButtonClick","disabled","trim","Task","state","visible","handleTaskClick","_this","setState","prevState","handleDoneClick","_this$props$data","data","onTaskComplete","handleModifyClick","_this$props$data2","onTaskModify","handleDelClick","_this$props$data3","onTaskDelete","_this$props$data4","this","failed","ddmmyyyy","title","Fragment","React","Component","TaskList","length","map","item","App_Task","key","renderTasks","TasksFinished","style","width","doneTime","doneDate","Filter","filter","onFilterChange","Timer","_this2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","today","Date","time","getHours","getMinutes","date","getDate","getMonth","getFullYear","currentTime","currentDate","seconds","onTimerTick","_this3","interval","setInterval","tick","clearInterval","App","tasks","donetasks","handleTimerTick","_this4","handleNameChange","currentTarget","handleDescriptionChange","handleTimeChange","handleDateChange","handlePriorityClick","mode","handleButtonClick","preventDefault","nextTasks","concat","toConsumableArray","handleCompleteTask","newList","doneTasks","handleModifyTaks","handleDeleteTask","handleFilterSelect","filteredTasks","setItem","stringify","list","elem","filteredList","App_Timer","App_NewTask","App_Filter","App_TaskList","App_TasksFinished","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cfae7152.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nconst currentTasks = localStorage.getItem('taskList') ? JSON.parse(localStorage.getItem('taskList')): [];\r\nconst finishedTasks = [];\r\n//Блок ввода для новой задачи\r\nconst NewTask = (props) => {\r\n  const taskName = props.taskName\r\n  const description = props.description\r\n  const priority = props.priority\r\n  const endTime = props.endTime\r\n  const endDate = props.endDate\r\n  return (\r\n    <form className=\"new-task\">\r\n      <h2>Новая задача</h2>\r\n      <input\r\n        className={\"task-name \" + priority}\r\n        id=\"task-name\"\r\n        onChange={(e) => props.onNameChange(e)}\r\n        type=\"text\"\r\n        placeholder=\"Название задачи\"\r\n        autoComplete=\"off\"\r\n        value={taskName}\r\n      />\r\n      <input\r\n        className={\"task-description \" + priority} \r\n        id=\"task-description\"\r\n        onChange={(e) => props.onDescriptionChange(e)}\r\n        placeholder=\"Описание задачи\"\r\n        autoComplete=\"off\"\r\n        value={description}\r\n      /> \r\n      <label className={\"task-time \" + priority}>\r\n        Время окончания\r\n        <input \r\n          className=\"clock\"\r\n          id=\"clock\"\r\n          onChange={(e) => props.onTimeChange(e)}\r\n          type=\"time\"\r\n          value={endTime}\r\n        />\r\n      </label>\r\n      <label className={\"task-date \" + priority}>\r\n        Дата окончания\r\n        <input \r\n          className=\"calendar\"\r\n          id=\"calendar\"\r\n          onChange={(e) => props.onDateChange(e)}\r\n          type=\"date\"\r\n          min= \"2019-07-17\"\r\n          max=\"2100-12-31\"\r\n          value={endDate}\r\n        />\r\n      </label>\r\n      <label className=\"task-radio low\"><input\r\n        onChange={() => props.onPriorityClick('low')}\r\n        type=\"radio\"\r\n        name=\"priority\"\r\n        value=\"low\"\r\n        checked={priority === \"low\"}\r\n      />Обычная</label>\r\n      <label className=\"task-radio med\"><input\r\n        onChange={() => props.onPriorityClick('med')}\r\n        type=\"radio\"\r\n        name=\"priority\"\r\n        value=\"med\"\r\n        checked={priority === \"med\"}\r\n      />Важная</label>\r\n      <label className=\"task-radio high\"><input\r\n        onChange={() => props.onPriorityClick('high')}\r\n        type=\"radio\"\r\n        name=\"priority\"\r\n        value=\"high\"\r\n        checked={priority === \"high\"}\r\n      />Очень важная</label>\r\n      <button \r\n        className='add' \r\n        onClick={(e) => props.onButtonClick(e)} \r\n        disabled={taskName.trim() ? false : true}\r\n      >Добавить</button>\r\n    </form> \r\n  )\r\n}\r\n//Одиночная задача из списка\r\nclass Task extends React.Component {\r\n  state = {\r\n      visible: false,\r\n  }\r\n  handleTaskClick = () => {\r\n    this.setState(prevState => ({visible: !prevState.visible}))\r\n  }\r\n  \r\n  handleDoneClick = () => {\r\n    this.setState(prevState => ({visible: !prevState.visible}))\r\n    const {id, taskName, description, priority, endTime, endDate} = this.props.data\r\n    this.props.onTaskComplete({id, taskName, description, priority, endTime, endDate})\r\n  }\r\n  handleModifyClick = () => {\r\n    this.setState(prevState => ({visible: !prevState.visible}))\r\n    const {id, taskName, description, priority, endTime, endDate} = this.props.data\r\n    this.props.onTaskModify({id, taskName, description, priority, endTime, endDate})\r\n  }\r\n  handleDelClick = () => {\r\n    this.setState(prevState => ({visible: !prevState.visible}))\r\n    const {id, taskName, description, priority, endTime, endDate} = this.props.data\r\n    this.props.onTaskDelete({id, taskName, description, priority, endTime, endDate})\r\n  }\r\n  render() {\r\n    const {taskName, description, priority, endTime, endDate, failed } = this.props.data\r\n    const ddmmyyyy = endDate ? endDate[8]+endDate[9]+'-'+endDate[5]+endDate[6]+'-'+endDate[0]+endDate[1]+endDate[2]+endDate[3] : null\r\n    const {visible} = this.state\r\n    return (\r\n      <li className={(failed) ? 'task failed' : 'task ' + priority} onClick={this.handleTaskClick} title=\"Нажмите на задачу чтобы увидеть полное описание\">\r\n        <button className=\"done\" onClick={this.handleDoneClick} disabled={failed}>Готово</button>\r\n        <span className=\"name\">{taskName}</span>\r\n        <span className=\"end-time\">{endTime}</span>\r\n        <span className=\"end-date\">{ddmmyyyy}</span>\r\n        {\r\n          visible && \r\n          <React.Fragment>\r\n            <span className=\"description\">\r\n              {  description ?  description : 'Нет описания' }\r\n            </span>\r\n            <button className=\"modify\" onClick={this.handleModifyClick}>Редактировать</button>\r\n            <button className=\"delete\" onClick={this.handleDelClick} >Удалить</button>\r\n          </React.Fragment>\r\n        }\r\n      </li>\r\n    )\r\n  }\r\n}\r\n//Список текущих задач\r\nconst TaskList = (props) => {\r\n  const renderTasks = (props) => {\r\n    const {data} = props\r\n    let taskTemplate = null\r\n    if (data.length) {\r\n      taskTemplate = data.map(function(item) {\r\n          return (\r\n            <Task key={item.id} data={item} onTaskComplete={props.onTaskComplete} onTaskModify={props.onTaskModify} onTaskDelete={props.onTaskDelete}/> \r\n          )   \r\n      })\r\n    } else {\r\n      taskTemplate = <li className=\"empty\"><p>Текущих задач нет</p></li>\r\n    }\r\n    return taskTemplate\r\n  }\r\n  return (\r\n    <div className=\"task-list\">\r\n      <h2>Текущие задачи</h2>\r\n      <ul>\r\n        {renderTasks(props)}\r\n      </ul>\r\n    </div>\r\n  )\r\n}  \r\n//Список завершенных задач\r\nconst TasksFinished = (props) => {\r\n  const renderTasks = (props) => {\r\n    const {data} = props\r\n    let taskTemplate = null\r\n    if (data.length) {\r\n        taskTemplate = data.map(function(item) {\r\n            return (\r\n              <li className='task passed' key={item.id}>\r\n                <span style={{width: 110}}></span>\r\n                <span className=\"name\">{item.taskName}</span>\r\n                <span className=\"end-time\">{item.doneTime}</span>\r\n                <span className=\"end-date\">{item.doneDate}</span>\r\n              </li>\r\n            )   \r\n        }) \r\n    } else {\r\n        taskTemplate = <li className=\"empty\"><p>Завершенных задач нет</p></li>\r\n    }\r\n    return taskTemplate\r\n  }\r\n  return (\r\n    <div className=\"task-list\">\r\n        <h2>Завершенные задачи</h2>\r\n        <ul>\r\n          {renderTasks(props)}\r\n        </ul>\r\n    </div>\r\n  ) \r\n}\r\n// блок выбора филтра отображения задач\r\nconst Filter = (props) => {\r\n  return (\r\n    <div className=\"filter-field\">\r\n      <h2>Фильтр</h2>\r\n      <label className=\"filter all\"><input\r\n        type=\"radio\"\r\n        name=\"filter\"\r\n        value=\"all\"\r\n        checked={props.filter === 'all'}\r\n        onChange={() => props.onFilterChange('all')}\r\n      />Все</label>\r\n      <label className=\"filter low\"><input\r\n        type=\"radio\"\r\n        name=\"filter\"\r\n        value=\"low\"\r\n        checked={props.filter === 'low'}\r\n        onChange={() => props.onFilterChange('low')}\r\n      />Обычные\r\n      </label>\r\n      <label className=\"filter med\"><input\r\n        type=\"radio\"\r\n        name=\"filter\"\r\n        value=\"med\"\r\n        checked={props.filter === 'med'}\r\n        onChange={() => props.onFilterChange('med')}\r\n      />Важные\r\n      </label>\r\n      <label className=\"filter high\"><input\r\n        type=\"radio\"\r\n        name=\"filter\"\r\n        value=\"high\"\r\n        checked={props.filter === 'high'}\r\n        onChange={() => props.onFilterChange('high')}\r\n      />Очень важные\r\n      </label>\r\n    </div>\r\n  )\r\n}\r\n//встроенный таймер, взято из учебника по ReactJs\r\nclass Timer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const today = new Date()\r\n    const hrs = today.getHours() < 10 ? '0'+ today.getHours() : today.getHours()\r\n    const mins = today.getMinutes() < 10 ? '0' + today.getMinutes() : today.getMinutes()\r\n    const time = hrs + \":\" + mins\r\n    const dd = today.getDate() < 10 ? '0'+ today.getDate() : today.getDate() \r\n    const mm = today.getMonth() + 1 < 10 ? '0' + (today.getMonth() + 1) : today.getMonth() + 1\r\n    const yyyy = today.getFullYear()\r\n    const date = dd + '-' + mm + '-' + yyyy\r\n    this.state = ({currentTime: time, currentDate: date, seconds: 0})\r\n  } \r\n  tick() {\r\n    const today = new Date()\r\n    const hrs = today.getHours() < 10 ? '0'+ today.getHours() : today.getHours()\r\n    const mins = today.getMinutes() < 10 ? '0' + today.getMinutes() : today.getMinutes()\r\n    const time = hrs + \":\" + mins\r\n    const dd = today.getDate() < 10 ? '0'+ today.getDate() : today.getDate() \r\n    const mm = today.getMonth() + 1 < 10 ? '0' + (today.getMonth() + 1) : today.getMonth() + 1\r\n    const yyyy = today.getFullYear()\r\n    const date = dd + '-' + mm + '-' + yyyy\r\n    this.setState(prevState => ({currentTime: time, currentDate: date, seconds: prevState.seconds + 1}));\r\n    this.props.onTimerTick({time, date})\r\n  }\r\n  componentDidMount() {\r\n    this.interval = setInterval(() => this.tick(), 1000);\r\n  }\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"timer\">\r\n        <span>{this.state.currentTime}</span>\r\n        <span>{this.state.currentDate}</span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nclass App extends React.Component {\r\n  state = {\r\n    id: '',\r\n    taskName: '',\r\n    description: '',\r\n    priority: 'med',\r\n    endTime: '',\r\n    endDate: '',\r\n    tasks: currentTasks,\r\n    donetasks: finishedTasks,\r\n    filter: 'all',\r\n    currentTime:'',\r\n    currentDate:''\r\n  }\r\n  handleTimerTick = (data) => {\r\n    const {time, date} = data\r\n    this.setState({currentTime: time, currentDate: date})\r\n  }\r\n  //можно рефакторить функции отслеживания изменений инпутов\r\n  handleNameChange = (e) => {\r\n    this.setState({taskName: e.currentTarget.value})\r\n  }\r\n  handleDescriptionChange = (e) => {\r\n    this.setState({description: e.currentTarget.value})\r\n  }\r\n  handleTimeChange = (e) => {\r\n    this.setState({endTime: e.currentTarget.value})\r\n  }\r\n  handleDateChange = (e) => {\r\n    this.setState({endDate: e.currentTarget.value})\r\n  }\r\n  \r\n  handlePriorityClick = (mode) => {\r\n    this.setState({priority: mode})\r\n  }\r\n  handleButtonClick = (e) => {\r\n    e.preventDefault()\r\n    const data = {\r\n      id: +new Date(),\r\n      taskName: this.state.taskName,\r\n      description: this.state.description,\r\n      priority: this.state.priority,\r\n      endTime: this.state.endTime,\r\n      endDate: this.state.endDate\r\n    }\r\n    const nextTasks = [data, ...this.state.tasks]\r\n    this.setState({\r\n      id: '',\r\n      taskName: '',\r\n      description: '',\r\n      priority: 'med',\r\n      endTime: '',\r\n      endDate: '', \r\n      tasks: nextTasks})\r\n  }\r\n  handleCompleteTask = (data) => {\r\n    const newList = this.state.tasks.filter((item)=>{\r\n      return item.id !== data.id\r\n    })\r\n    data.doneTime = this.state.currentTime\r\n    data.doneDate = this.state.currentDate\r\n    const doneTasks = [data, ...this.state.donetasks]\r\n    this.setState({tasks: newList, donetasks: doneTasks})\r\n  }\r\n  handleModifyTaks = (data) => {\r\n    const newList = this.state.tasks.filter((item)=>{\r\n      return item.id !== data.id\r\n    })\r\n    this.setState({\r\n      id: data.id,\r\n      taskName: data.taskName,\r\n      description: data.description,\r\n      priority: data.priority,\r\n      endTime: data.endTime,\r\n      endDate: data.endDate,\r\n      tasks: newList\r\n    })\r\n  }\r\n  handleDeleteTask = (data) => {\r\n    const newList = this.state.tasks.filter((item) => {\r\n      return item.id !== data.id\r\n    })\r\n    this.setState ({tasks: newList})\r\n  }\r\n  handleFilterSelect = (mode) => {\r\n    this.setState ({filter: mode})\r\n  }\r\n  //Обновляет список задач при фильтрации и сверяет срок выполнения задачи\r\n  filteredTasks = () => {\r\n    localStorage.setItem('taskList', JSON.stringify(this.state.tasks))\r\n    let list = this.state.tasks.map((item) => {\r\n      let elem = item\r\n      if (!item.endDate){\r\n        elem.failed = false\r\n        return elem\r\n      } else {\r\n        const date = Date.parse(item.endDate +\" \"+ item.endTime)\r\n        const curdate = Date.parse(new Date())\r\n        if (date < curdate) {\r\n          elem.failed = true\r\n          return elem\r\n        } else {  \r\n          elem.failed = false\r\n          return elem\r\n        }\r\n      }\r\n    })\r\n    if (this.state.filter === 'all') {\r\n      return list/*this.state.tasks*/\r\n    } else {\r\n      return list.filter((item) => {\r\n        return item.priority === this.state.filter\r\n      })  \r\n    }\r\n  }\r\n\r\n  render() {\r\n    const filteredList = this.filteredTasks()\r\n    return (\r\n      <div className=\"app\">\r\n        <h1>Список задач</h1>\r\n        <Timer onTimerTick={this.handleTimerTick}/>\r\n        <NewTask\r\n          taskName={this.state.taskName}\r\n          description={this.state.description}\r\n          priority={this.state.priority}\r\n          endTime={this.state.endTime}\r\n          endDate={this.state.endDate} \r\n          onNameChange={this.handleNameChange}\r\n          onDescriptionChange={this.handleDescriptionChange}\r\n          onTimeChange={this.handleTimeChange}\r\n          onDateChange={this.handleDateChange}\r\n          onPriorityClick={this.handlePriorityClick}\r\n          onButtonClick={this.handleButtonClick}\r\n        />\r\n        <Filter filter={this.state.filter} onFilterChange={this.handleFilterSelect}/>\r\n        <TaskList data={filteredList} onTaskComplete={this.handleCompleteTask} onTaskModify={this.handleModifyTaks} onTaskDelete={this.handleDeleteTask}/>\r\n        <TasksFinished data={this.state.donetasks}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
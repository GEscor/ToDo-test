{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["currentTasks","localStorage","getItem","JSON","parse","finishedTasks","NewTask","props","taskName","description","priority","endTime","endDate","react_default","a","createElement","className","id","onChange","e","onNameChange","type","placeholder","autoComplete","value","onDescriptionChange","onTimeChange","onDateChange","min","max","onPriorityClick","name","checked","onClick","onButtonClick","disabled","trim","Task","state","visible","handleTaskClick","_this","setState","prevState","handleDoneClick","_this$props$data","data","onTaskComplete","handleModifyClick","_this$props$data2","onTaskModify","handleDelClick","_this$props$data3","onTaskDelete","_this$props$data4","this","failed","ddmmyyyy","title","Fragment","React","Component","TaskList","length","map","item","App_Task","key","renderTasks","TasksFinished","style","width","doneTime","doneDate","Filter","filter","onFilterChange","Timer","_this2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","today","Date","time","getHours","getMinutes","date","getDate","getMonth","getFullYear","currentTime","currentDate","seconds","onTimerTick","_this3","interval","setInterval","tick","clearInterval","App","tasks","donetasks","handleTimerTick","_this4","handleNameChange","currentTarget","handleDescriptionChange","handleTimeChange","handleDateChange","handlePriorityClick","mode","handleButtonClick","preventDefault","nextTasks","concat","toConsumableArray","handleCompleteTask","newList","doneTasks","handleModifyTaks","handleDeleteTask","handleFilterSelect","filteredTasks","setItem","stringify","list","elem","filteredList","App_Timer","App_NewTask","App_Filter","App_TaskList","App_TasksFinished","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cfae7152.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst currentTasks = localStorage.getItem('taskList') ? JSON.parse(localStorage.getItem('taskList')): [];\nconst finishedTasks = [];\n//Блок ввода для новой задачи\nconst NewTask = (props) => {\n  const taskName = props.taskName\n  const description = props.description\n  const priority = props.priority\n  const endTime = props.endTime\n  const endDate = props.endDate\n  return (\n    <form className=\"new-task\">\n      <h2>Новая задача</h2>\n      <input\n        className={\"task-name \" + priority}\n        id=\"task-name\"\n        onChange={(e) => props.onNameChange(e)}\n        type=\"text\"\n        placeholder=\"Название задачи\"\n        autoComplete=\"off\"\n        value={taskName}\n      />\n      <input\n        className={\"task-description \" + priority} \n        id=\"task-description\"\n        onChange={(e) => props.onDescriptionChange(e)}\n        placeholder=\"Описание задачи\"\n        autoComplete=\"off\"\n        value={description}\n      /> \n      <label className={\"task-time \" + priority}>\n        Время окончания\n        <input \n          className=\"clock\"\n          id=\"clock\"\n          onChange={(e) => props.onTimeChange(e)}\n          type=\"time\"\n          value={endTime}\n        />\n      </label>\n      <label className={\"task-date \" + priority}>\n        Дата окончания\n        <input \n          className=\"calendar\"\n          id=\"calendar\"\n          onChange={(e) => props.onDateChange(e)}\n          type=\"date\"\n          min= \"2019-07-17\"\n          max=\"2100-12-31\"\n          value={endDate}\n        />\n      </label>\n      <label className=\"task-radio low\"><input\n        onChange={() => props.onPriorityClick('low')}\n        type=\"radio\"\n        name=\"priority\"\n        value=\"low\"\n        checked={priority === \"low\"}\n      />Обычная</label>\n      <label className=\"task-radio med\"><input\n        onChange={() => props.onPriorityClick('med')}\n        type=\"radio\"\n        name=\"priority\"\n        value=\"med\"\n        checked={priority === \"med\"}\n      />Важная</label>\n      <label className=\"task-radio high\"><input\n        onChange={() => props.onPriorityClick('high')}\n        type=\"radio\"\n        name=\"priority\"\n        value=\"high\"\n        checked={priority === \"high\"}\n      />Очень важная</label>\n      <button \n        className='add' \n        onClick={(e) => props.onButtonClick(e)} \n        disabled={taskName.trim() ? false : true}\n      >Добавить</button>\n    </form> \n  )\n}\n//Одиночная задача из списка\nclass Task extends React.Component {\n  state = {\n      visible: false,\n  }\n  handleTaskClick = () => {\n    this.setState(prevState => ({visible: !prevState.visible}))\n  }\n  \n  handleDoneClick = () => {\n    this.setState(prevState => ({visible: !prevState.visible}))\n    const {id, taskName, description, priority, endTime, endDate} = this.props.data\n    this.props.onTaskComplete({id, taskName, description, priority, endTime, endDate})\n  }\n  handleModifyClick = () => {\n    this.setState(prevState => ({visible: !prevState.visible}))\n    const {id, taskName, description, priority, endTime, endDate} = this.props.data\n    this.props.onTaskModify({id, taskName, description, priority, endTime, endDate})\n  }\n  handleDelClick = () => {\n    this.setState(prevState => ({visible: !prevState.visible}))\n    const {id, taskName, description, priority, endTime, endDate} = this.props.data\n    this.props.onTaskDelete({id, taskName, description, priority, endTime, endDate})\n  }\n  render() {\n    const {taskName, description, priority, endTime, endDate, failed } = this.props.data\n    const ddmmyyyy = endDate ? endDate[8]+endDate[9]+'-'+endDate[5]+endDate[6]+'-'+endDate[0]+endDate[1]+endDate[2]+endDate[3] : null\n    const {visible} = this.state\n    return (\n      <li className={(failed) ? 'task failed' : 'task ' + priority} onClick={this.handleTaskClick} title=\"Нажмите на задачу чтобы увидеть полное описание\">\n        <button className=\"done\" onClick={this.handleDoneClick} disabled={failed}>Готово</button>\n        <span className=\"name\">{taskName}</span>\n        <span className=\"end-time\">{endTime}</span>\n        <span className=\"end-date\">{ddmmyyyy}</span>\n        {\n          visible && \n          <React.Fragment>\n            <span className=\"description\">\n              {  description ?  description : 'Нет описания' }\n            </span>\n            <button className=\"modify\" onClick={this.handleModifyClick}>Редактировать</button>\n            <button className=\"delete\" onClick={this.handleDelClick} >Удалить</button>\n          </React.Fragment>\n        }\n      </li>\n    )\n  }\n}\n//Список текущих задач\nconst TaskList = (props) => {\n  const renderTasks = (props) => {\n    const {data} = props\n    let taskTemplate = null\n    if (data.length) {\n      taskTemplate = data.map(function(item) {\n          return (\n            <Task key={item.id} data={item} onTaskComplete={props.onTaskComplete} onTaskModify={props.onTaskModify} onTaskDelete={props.onTaskDelete}/> \n          )   \n      })\n    } else {\n      taskTemplate = <li className=\"empty\"><p>Текущих задач нет</p></li>\n    }\n    return taskTemplate\n  }\n  return (\n    <div className=\"task-list\">\n      <h2>Текущие задачи</h2>\n      <ul>\n        {renderTasks(props)}\n      </ul>\n    </div>\n  )\n}  \n//Список завершенных задач\nconst TasksFinished = (props) => {\n  const renderTasks = (props) => {\n    const {data} = props\n    let taskTemplate = null\n    if (data.length) {\n        taskTemplate = data.map(function(item) {\n            return (\n              <li className='task passed' key={item.id}>\n                <span style={{width: 110}}></span>\n                <span className=\"name\">{item.taskName}</span>\n                <span className=\"end-time\">{item.doneTime}</span>\n                <span className=\"end-date\">{item.doneDate}</span>\n              </li>\n            )   \n        }) \n    } else {\n        taskTemplate = <li className=\"empty\"><p>Завершенных задач нет</p></li>\n    }\n    return taskTemplate\n  }\n  return (\n    <div className=\"task-list\">\n        <h2>Завершенные задачи</h2>\n        <ul>\n          {renderTasks(props)}\n        </ul>\n    </div>\n  ) \n}\n// блок выбора филтра отображения задач\nconst Filter = (props) => {\n  return (\n    <div className=\"filter-field\">\n      <h2>Фильтр</h2>\n      <label className=\"filter all\"><input\n        type=\"radio\"\n        name=\"filter\"\n        value=\"all\"\n        checked={props.filter === 'all'}\n        onChange={() => props.onFilterChange('all')}\n      />Все</label>\n      <label className=\"filter low\"><input\n        type=\"radio\"\n        name=\"filter\"\n        value=\"low\"\n        checked={props.filter === 'low'}\n        onChange={() => props.onFilterChange('low')}\n      />Обычные\n      </label>\n      <label className=\"filter med\"><input\n        type=\"radio\"\n        name=\"filter\"\n        value=\"med\"\n        checked={props.filter === 'med'}\n        onChange={() => props.onFilterChange('med')}\n      />Важные\n      </label>\n      <label className=\"filter high\"><input\n        type=\"radio\"\n        name=\"filter\"\n        value=\"high\"\n        checked={props.filter === 'high'}\n        onChange={() => props.onFilterChange('high')}\n      />Очень важные\n      </label>\n    </div>\n  )\n}\n//встроенный таймер, взято из учебника по ReactJs\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    const today = new Date()\n    const hrs = today.getHours() < 10 ? '0'+ today.getHours() : today.getHours()\n    const mins = today.getMinutes() < 10 ? '0' + today.getMinutes() : today.getMinutes()\n    const time = hrs + \":\" + mins\n    const dd = today.getDate() < 10 ? '0'+ today.getDate() : today.getDate() \n    const mm = today.getMonth() + 1 < 10 ? '0' + (today.getMonth() + 1) : today.getMonth() + 1\n    const yyyy = today.getFullYear()\n    const date = dd + '-' + mm + '-' + yyyy\n    this.state = ({currentTime: time, currentDate: date, seconds: 0})\n  } \n  tick() {\n    const today = new Date()\n    const hrs = today.getHours() < 10 ? '0'+ today.getHours() : today.getHours()\n    const mins = today.getMinutes() < 10 ? '0' + today.getMinutes() : today.getMinutes()\n    const time = hrs + \":\" + mins\n    const dd = today.getDate() < 10 ? '0'+ today.getDate() : today.getDate() \n    const mm = today.getMonth() + 1 < 10 ? '0' + (today.getMonth() + 1) : today.getMonth() + 1\n    const yyyy = today.getFullYear()\n    const date = dd + '-' + mm + '-' + yyyy\n    this.setState(prevState => ({currentTime: time, currentDate: date, seconds: prevState.seconds + 1}));\n    this.props.onTimerTick({time, date})\n  }\n  componentDidMount() {\n    this.interval = setInterval(() => this.tick(), 1000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  render() {\n    return (\n      <div className=\"timer\">\n        <span>{this.state.currentTime}</span>\n        <span>{this.state.currentDate}</span>\n      </div>\n    );\n  }\n}\nclass App extends React.Component {\n  state = {\n    id: '',\n    taskName: '',\n    description: '',\n    priority: 'med',\n    endTime: '',\n    endDate: '',\n    tasks: currentTasks,\n    donetasks: finishedTasks,\n    filter: 'all',\n    currentTime:'',\n    currentDate:''\n  }\n  handleTimerTick = (data) => {\n    const {time, date} = data\n    this.setState({currentTime: time, currentDate: date})\n  }\n  //можно рефакторить функции отслеживания изменений инпутов\n  handleNameChange = (e) => {\n    this.setState({taskName: e.currentTarget.value})\n  }\n  handleDescriptionChange = (e) => {\n    this.setState({description: e.currentTarget.value})\n  }\n  handleTimeChange = (e) => {\n    this.setState({endTime: e.currentTarget.value})\n  }\n  handleDateChange = (e) => {\n    this.setState({endDate: e.currentTarget.value})\n  }\n  \n  handlePriorityClick = (mode) => {\n    this.setState({priority: mode})\n  }\n  handleButtonClick = (e) => {\n    e.preventDefault()\n    const data = {\n      id: +new Date(),\n      taskName: this.state.taskName,\n      description: this.state.description,\n      priority: this.state.priority,\n      endTime: this.state.endTime,\n      endDate: this.state.endDate\n    }\n    const nextTasks = [data, ...this.state.tasks]\n    this.setState({\n      id: '',\n      taskName: '',\n      description: '',\n      priority: 'med',\n      endTime: '',\n      endDate: '', \n      tasks: nextTasks})\n  }\n  handleCompleteTask = (data) => {\n    const newList = this.state.tasks.filter((item)=>{\n      return item.id !== data.id\n    })\n    data.doneTime = this.state.currentTime\n    data.doneDate = this.state.currentDate\n    const doneTasks = [data, ...this.state.donetasks]\n    this.setState({tasks: newList, donetasks: doneTasks})\n  }\n  handleModifyTaks = (data) => {\n    const newList = this.state.tasks.filter((item)=>{\n      return item.id !== data.id\n    })\n    this.setState({\n      id: data.id,\n      taskName: data.taskName,\n      description: data.description,\n      priority: data.priority,\n      endTime: data.endTime,\n      endDate: data.endDate,\n      tasks: newList\n    })\n  }\n  handleDeleteTask = (data) => {\n    const newList = this.state.tasks.filter((item) => {\n      return item.id !== data.id\n    })\n    this.setState ({tasks: newList})\n  }\n  handleFilterSelect = (mode) => {\n    this.setState ({filter: mode})\n  }\n  //Обновляет список задач при фильтрации и сверяет срок выполнения задачи\n  filteredTasks = () => {\n    localStorage.setItem('taskList', JSON.stringify(this.state.tasks))\n    let list = this.state.tasks.map((item) => {\n      let elem = item\n      if (!item.endDate){\n        elem.failed = false\n        return elem\n      } else {\n        const date = Date.parse(item.endDate +\" \"+ item.endTime)\n        const curdate = Date.parse(new Date())\n        if (date < curdate) {\n          elem.failed = true\n          return elem\n        } else {  \n          elem.failed = false\n          return elem\n        }\n      }\n    })\n    if (this.state.filter === 'all') {\n      return list/*this.state.tasks*/\n    } else {\n      return list.filter((item) => {\n        return item.priority === this.state.filter\n      })  \n    }\n  }\n\n  render() {\n    const filteredList = this.filteredTasks()\n    return (\n      <div className=\"app\">\n        <h1>Список задач</h1>\n        <Timer onTimerTick={this.handleTimerTick}/>\n        <NewTask\n          taskName={this.state.taskName}\n          description={this.state.description}\n          priority={this.state.priority}\n          endTime={this.state.endTime}\n          endDate={this.state.endDate} \n          onNameChange={this.handleNameChange}\n          onDescriptionChange={this.handleDescriptionChange}\n          onTimeChange={this.handleTimeChange}\n          onDateChange={this.handleDateChange}\n          onPriorityClick={this.handlePriorityClick}\n          onButtonClick={this.handleButtonClick}\n        />\n        <Filter filter={this.state.filter} onFilterChange={this.handleFilterSelect}/>\n        <TaskList data={filteredList} onTaskComplete={this.handleCompleteTask} onTaskModify={this.handleModifyTaks} onTaskDelete={this.handleDeleteTask}/>\n        <TasksFinished data={this.state.donetasks}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}